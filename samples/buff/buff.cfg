interface AddAttackBy ( defaultImpl='NoAdd') {
	struct NoAdd {
	}

	struct DirectAdd {
		val:int; // 附加的攻击值
	}

	struct CostSenderHp {
		chance:int; // 转换概率[10000表示100%]
		transferRate:int; // 转换比率[10000表示100%]
		maxHpRate:int; // 消耗伤害发送者的气血值转换, 消耗气血上限的百分比[10000表示100% 不足按实际消耗转换]
	}

	struct SenderCurHp {
		chance:int; // 转换概率[10000表示100%]
		transferRate:int; // 转换比率[10000表示100%]
	}

	struct CostSenderMp {
		chance:int; // 转换概率[10000表示100%]
		transferRate:int; // 转换比率[10000表示100%]
		maxMpRate:int; // 消耗伤害发送者的真气值转换, 消耗真气上限的百分比[10000表示100% 不足按实际消耗转换]
	}

	struct SenderCurMp {
		chance:int; // 转换概率[10000表示100%]
		transferRate:int; // 转换比率[10000表示100%]
	}

	struct CostSenderCurHp {
		chance:int; // 转换概率[10000表示100%]
		transferRate:int; // 转换比率[10000表示100%]
		curHpRate:int; // 消耗当前气血的百分比[10000表示100%]
	}

	struct CostSenderCurMp {
		chance:int; // 转换概率[10000表示100%]
		transferRate:int; // 转换比率[10000表示100%]
		curMpRate:int; // 消耗当前气血的百分比[10000表示100%]
	}

	struct SenderCritical {
		chance:int; // 转换概率[10000表示100%]
		CriticalRate:int; // 暴击转换比率
		DamageRate:int; // 暴伤转换比率
	}

	struct SenderAttrs {
		chance:int; // 转换概率[10000表示100%]
		atts:list<int>; // 属性列表
		percents:list<int>; // 转换比率列表
	}

	struct ReceiverAttrs {
		chance:int; // 转换概率[10000表示100%]
		attrs:list<int>;// ->common.fightattrs; // 属性列表
		rates:list<int>; // 转换比率列表
	}

}

interface AddDamagePercentBy (defaultImpl='NoAdd') {
	struct NoAdd {
	}

	struct SenderCurMpRate {
		chance:int; // 转换概率[10000表示100%]
		transferRate:int; // 按伤害发送者的当前真气百分比转换, 转换比率[10000表示100%]
	}

	struct CostSenderMp {
		chance:int; // 转换概率[10000表示100%]
		transferRate:int; // 转换比率[10000表示100%]
		maxMpRate:int; // 消耗伤害发送者的真气上限百分比转换, 消耗真气上限的百分比[10000表示100% 不足按实际消耗转换]
	}

	struct ReceiverCurHpRate {
		chance:int; // 转换概率[10000表示100%]
		transferRate:int; // 按伤害承受者的当前气血的百分比转换,转换比率[10000表示100%]
	}

	struct SenderLossHpRate {
		chance:int; // 转换概率[10000表示100%]
		transferRate:int; // 按伤害发送者损失的生命百分比转换，转换比率[10000表示100%]
	}

	struct ReceiverLossHpRate {
		chance:int; // 转换概率[10000表示100%]
		transferRate:int; // 按伤害承受者损失的生命百分比转换，转换比率[10000表示100%]
	}

	struct ReceiverLossMpRate {
		chance:int; // 转换概率[10000表示100%]
		transferRate:int; // 按伤害承受者损失的真气百分比转换，转换比率[10000表示100%]
	}

	struct SenderLossMpRate {
		chance:int; // 转换概率[10000表示100%]
		transferRate:int; // 按伤害承受者损失的真气百分比转换，转换比率[10000表示100%]
	}

}

interface EffectLogic {
    struct Damage { // 伤害
		damageModifyPercent:int; // 伤害百分比修正(0表示不造成伤害，10000表示造成的100%的伤害 12000表示造成120%的伤害 6000表示造成60%的伤害)
		damageModifyPercentFloat:int; // 伤害百分比的浮动系数(无则填0，10000表示100%)
		damageAddPercent: list<AddDamagePercentBy>;
		attackAddPercent:int; // 附加的攻击百分比(10000表示100%)
		attackAdd:list<AddAttackBy>;
		criticalAddPercent:int;
		hpRemovePercent:int;
		hpRemoveAdd:int;
		lifeStealRate:int; // 伤害吸血转换比率( 发出的伤害按比率转换成自己的血量  10000表示100%)
		musthit:bool;
		behitbuff:int;
		bossHpRemovePercent:int;
		manaRegeneration:int;
		isShareable:bool;
		monsterHpRemovePercentModify:int;
		damagetype:int; // ->buff.effectdamagetype (nullable);
		realdamageAdd:list<buff.RealDamageAdd>;
	}

	struct Heal { // 治疗
		healModifyPercent:int;
		healAdd:int;
		hpAdd:buff.ModifyMax; // 回复当前hp
		mpAdd:buff.ModifyMax; // 回复当前mp
		xpAdd:buff.ModifyMax; // 回复当前hp
		energy:int; // 回复当前能量
	}

    struct SetHpMp { // 直接改变目标的血量和蓝量
        hpType:int; //改变血量类型（0：不改变，1：绝对值，2：百分比,3:绝对值增减，4：百分比增减）
        hp:int;
        mpType:int;
        mp:int;
        isKeepWhenFadeout:bool; //buff消散时是否修改数值，默认false不修改
    }

	struct Dispel { // 驱散
		buffsubclasses:int;
		buffidlist:list<int> ->buff.buff;
		count:int;
	}


	struct Interrupt { // 打断受击者的当前技能
	}

	struct Taunt { // 嘲讽，让对方的战斗目标变成自己
	}

	struct Relive { // 复活
		hpPercent:int;
		mpPercent:int;
		xpPercent:int;
	}

	struct CastSkill { // 释放技能
		skillid:int;
		skilllevel:int;
	}

    struct AddSkillCDs { // 增加技能cd
        maxcount:int; //冻结CD中的技能CD,最大数量
        delta:float;
    }

    struct BuffSteal { // Buff偷取,偷取的Buff数量
        count:int;
    }

    struct ResetSkillsInCD {  // 将技能列表的技能重置进入完整CD
        skillList:list<int>;
    }

    struct Bullet { // 弹幕
        bulletid:int; // ->chat.bulletinfo;
        isbroadcast:bool;
    }

	struct TalkTips { // 对话窗口提示
		playertalkID:int;
	}

	struct CombatTips { // 战斗提示
		uitextid:int;
		duration:float;
	}

	struct CreateMonster { // 创建物体
		belong:int;
		monstercreateinfos:list<buff.MonsterCreateInfo>;
	}

    struct PlayAnim { // 动作
        clip:str;
    }

    struct PlayAudio { // 音效
        clip:str;
        femaleClip:str;
        lifeRelyParentBuff:bool;
    }

    struct CameraTwist { // 镜头特效
        duration:float; //虽然有持续时间，但为简单仍然视之为effect，而不是buff，因为这个不可取消，不用记录status
        effectType:int;
    }

    struct CameraShake { // 镜头震动
        duration:float;
        vibrato:int;
        randomness:int;
        strengthVector:Vec3;
        broadcastDistance:int;
    }

    struct CameraAnim { // 镜头动画
        duration:float;
        animDataPath:str;
        blendInTime:float;
    }

	struct AddBuff { // 加buff
		buffIds:list<int> ->buff.buff;
		paramBuffIds:list<ParamInt>;
		paramBuffs:list<BuffLogic>;
		target:list<TargetSelector>;
	}

    struct HitHint { // 技能伤害范围预警提示
        duration:float;
        asset:str;
        offset:Vec3;
        yAngle:float;
        zone:HitHintZone;
        target:list<TargetSelector>;
    }

    struct CreateObj { // 创建子物体
        duration:float;
        asset:ParamStr;
        offset:Vec3;
        yAngle:float;
        lockDirection:bool; // 锁定朝向(当施法者攻击目标时，特效朝向为：施法者指向目标)
        lifeRelyParentBuff:bool; // 为true时含义： 上层buff销毁时，产生的此obj也销毁
        isUseLockedOffsetPos:bool; // 使用技能范围摇杆确定的位置

        objInfo:ObjCreatInfo;
        target:list<TargetSelector>;
        effectWhenTrigger:EffectLogic;
    }


    struct EffectIf {
        condition:buff.Condition;
        effect:buff.EffectLogic;
        elseEffect:buff.EffectLogic;
    }

	struct EffectList {
	    effects:list<EffectLogic>;
	}

}

struct Modify {
	val:int;
	percent:int;
}

struct ModifyMax {
	val:int;
	percent:int;
	max:int;
}

struct RealDamageAdd {
	add:buff.AddAttackBy;
	maxhpremove:int;
}

struct Vec3 {
    x:float;
    y:float;
    z:float;
}

struct MonsterCreateInfo {
	monsterId:int; // ->npc.monster;
	offset:Vec3;
	yAngle:float;
	createdBuffs:list<int> ->buff.buff;
}

interface ObjCreatInfo {
    struct Static { // 独立的子物体，一般是特效
    }

    struct Bind { // 跟随target位置的子物体
        followDir:bool; // 是否也跟随方向
        bind:str; // 绑定位置，"Bip001 Head", "Bip001 Pelvis", "Bip001 L Hand", "Bip001 R Hand","Bip001 L Foot" ,"Bip001 R Foot", "wing_point","foot"
    }

    struct Trap { // 陷阱
        isRepeatHit:bool; //是否是持续伤害陷阱
        isVisible:bool; //是否为他人可见的陷阱
    }

    struct Line { //直线导弹，即直线轨迹运行
        speed:float;  //速度
        acc:float;  //加速度
    }

    struct Chase { //追踪导弹，即导弹实时追随目标(直线，每次Update调整方向) （当没目标时Server将其转为Line）
        speed:float;  //速度
        acc:float;  //加速度
    }

    struct Manned { //载人导弹，即角色跟随导弹轨迹运动（即：Server创建Missile(直线)，同时Fighter执行locomotion）
        speed:float;
        acc:float;
    }

    struct ChaseCurve{ //曲线追踪导弹，即轨迹是曲线型，且实时追随目标 （当没目标时Server模拟出一个目标点，即前方朝向技能半径处）
        curveAngle:float; //曲线角度
        distance:float; //模拟距离
    }

    struct TargetedCurve{ //游戏中拖拽出目标点，向目标点发射导弹，轨迹是曲线型 ,isUseLockedOffsetPos=true;
        dragAngleMax:int; //抛物线最大角度
        dragAngleMin:int;
        speedMax:float; //最大速度
        accHori:float; //水平加速度
        accVert:float; //垂直加速度
        isDragTrail:bool; //画轨迹
    }
}

interface BuffLogic {

	struct DamageModifier { //伤害修正
		sendDamageIncAdd:int; // 伤害加成 10000表示增加100% -10000减少100%
		recvDamageDecAdd:int; // 受伤减免
		damageSenderMarkBuffId:int; // 伤害发起者有这个标记buff才做修正
	}

	struct DamageImmune { // 掉血免疫
		damage:int; // 最小伤害
		condition:buff.Condition;
		notifyID:int;
		countlimit:int;  //伤害次数限制
	}

	struct DamageAbsorbReflect {   // 吸收/反弹（吸收指按伤害回血，反弹指按伤害反给攻击者，都不会减免伤害）
		reflect:int;
		reflectPercent:int;
		absorb:int;
		absorbPercent:int;
		damageSenderMarkBuffId:int; // 伤害发起者有这个标记buff才做修正
		attrtype:int; // 吸收上限属性类型
		limitingfactor:float; // 吸收上限系数
		removeBuff:int; // 移除效果BuffID
		incHpRemove:bool; // 是否考虑生命移除效果
	}

	struct HealModifier {  // 回复量修正
		hpHealModify:buff.Modify; // 血量回复值,血量回复百分比(10000=100%)
		mpHealModify:buff.Modify;
		xpHealModify:buff.Modify;
	}

	struct AttrModifier {  // 战斗属性修改
		attrModMap:map<int,buff.Modify> ;
	}

	struct God { // 免疫所有debuff
		isInterruptByMove:bool;  // 是否移动时打断
		isInterruptBySendAttack:bool; // 是否攻击时打断
	}

	struct Immune {  // 免疫
		buffSubclasses:int; //可免疫buff类别
		buffId:int ->buff.buff (nullable); //免疫具体的buff
		count:int; //免疫最大数量
	}


	struct Mark {  // 标记
		group:int; // ->buff.bufflogickey (nullable);
		sort:int;
	}

	struct Stun { // 眩晕
		hit:bool; // 是否必中
	}

	struct Sleep { // 昏睡
		hit:bool;
	}

	struct Silent { // 沉默
		hit:bool;
	}

	struct Root { // 缠绕
		hit:bool;
	}

	struct Invisible { // 隐身
		appearWhenCasting:bool;
		appearWhenBeHit:bool;
		buffList:list<int> ->buff.buff;
	}


	struct Blink { // 瞬移，有持续时间可能被打断
		blinktype:int;
		param:float;
	}


	struct Rush { // 冲锋，有持续时间，
		mindistance:float;
		maxdistance:float;
		stopdistance:float;  // 距离目标停止距离
	}

    struct Pull { // 拉目标
		distance:float;
		stopdistance:float;
		isrefsenderdir:bool;
	}

	struct BeHit { // 受击
		beHitType:int; // ->fight.behittype;
		curve:int ; // ->skill.curve (nullable); 受击曲线
		deathCurve:int; //->skill.curve (nullable);
	}

	struct MagicShield { // 魔法盾，用蓝抵消伤害
		absorbLimit:int;  // 抵消伤害上限
		absorbDamagePercent:int;  // 抵消伤害百分比,10000表示100%
		CostMpPerDamage:float; //每一点伤害消耗多少蓝
	}

	struct HealByDamage {  // 期间受到的伤害按比例转化为治疗
		hpPercent:int;  //回复HP比例（10000代表100%）
		mpPercent:int;
	}

	struct HpLossLimit {  // 掉血上限，不改变伤害数值
		period:float;  //周期（秒）
		hpValue:int;   // 血量绝对值
		hpPercent:int; //血量最大百分比(10000代表100%)
	}

	struct LifeSteal { // 吸血，比如伤害附带10%吸血效果
		value:int;
		percent:int;
	}

	struct ModelChange { // 模型改变
		modelId:int;
	}

	struct ModelScale { // 模型缩放
		scale:float;
	}

	struct SetAttr { // 设置战斗属性值
		attrMap:map<int,buff.Modify>;
	}

	struct TempSkills { // 临时技能
		skillList:list<int>;
	}


	struct MoveDamage { // 移动掉血
		period:int;  // 检测周期（毫秒）
		percent:int; // 伤害百分比(10000表示100%)
	}

	struct ReduceSkillCDs { // 减少技能CD
		skillList:list<int>;
		delta:float; // 减少秒数
	}


	struct CriticalHit { // 重击，必定命中且暴击
		count:int; // 重击次数
		canNotMiss:bool; //是否必须命中
	}

	struct MarkSpot { // 标记位置，到时间拉回
		effect:EffectLogic; //附加效果
	}

	struct TransferBuff { // 转移DeBuff，将caster身上的buff转移到binder身上,
		count:int;
		buffSubClass:int;
		isInheritDuration:bool;
	}

	struct MpToHp {  // 消耗蓝量，回复气血
		period:float; // 周期（秒）
		costPercent:int; // 消耗蓝量百分比（10000代表100%）
		transferPercent:int; // 转换气血百分比（10000代表100%）
	}

	struct DeathRattle {  // 亡语效果
		bufflist:list<int> ->buff.buff;
	}

	struct LockHp {  // 锁定血量
		percent:int; // 血量绝对值
		value:int; // 血量绝对值
	}

	struct ShareDamage { // 伤害分摊
		isCopyDamage:bool; //伤害数值是否复制，不进行均摊，是则复制，不填或否则均摊
	}

	struct ReplaceSkills { // 技能替换，加buff时会将A技能替换为B技能，buff驱散时会将B技能替换回A技能
		replacelist:list<buff.ReplaceSkill>;
	}

	struct HealForbid {  // 禁疗，最终的禁疗值为：值和百分比上限换算的值，取较大值
		hpforbidvalue:int;
		hpforbidpercent:int;
		mpforbidvalue:int;
		mpforbidpercent:int;
		xpforbidvalue:int;
		xpforbidpercent:int;
	}

	struct MoveLossMp { // 移动扣蓝，如果与上一次检测的位置超过一定距离，则扣最大蓝值的百分比
		checkperiod:int;
		maxdis:float;
		lossrate:int;
	}

	struct MissileLineMove { //直线移动控制，和已有的直线导弹的移动一样，移动时：先改变高度，直线移动，再拉回原高度
		yangle:float;
		offsety:float;
		speed:float;
		acceleration:float;
		ignorecollision:bool;
		aftermovingactions:list<buff.EffectLogic>;
	}

	struct MissileChaseMove { // 导弹直线追踪移动控制，无视碰撞
		targettype:int;
		targetmarkbuff:int ->buff.buff (nullable);
		targetsphereradius:float;
		speed:float;
		acceleration:float;
		chasesuccbuffs:list<int> ->buff.buff;
		aftermovingactions:list<buff.EffectLogic>;
	}


	struct MissileParabolicCurveMove { //子弹沿着抛物线移动
		yangle:float;
		speedh:float;
		speedv:float;
		accelerationh:float;
		accelerationv:float;
		ignorecollision:bool;
		aftermovingactions:list<buff.EffectLogic>;
	}


	struct ClientControlReverse { // 控制逆向
	}

	struct SilentSkill { // 沉默技能
		skills:list<int> ->skill;
	}

	struct DisableDrop { // 让npc不再掉落
	}

	struct TriggerBuff { ////////////// 以下都是复合结构， 事件触发Buff，可用于实现一些事件触发的buff，或者给npc加上这个buff用于实现一个简单的ai
		times:int; // 触发次数,不限制填0
		cooldownSecond:float; //触发CD
		effectsOnTrigger:list<buff.EffectOnTrigger>;
	}

	struct DelayedEffect {  // 延迟
	    effect: EffectLogic;
	}

	struct PeriodEffect {
	    period:float;
    	effect: EffectLogic;
    }

	struct RandomBuff {
		buffMap:list<buff.WeightedBuffs>;
	}

	struct BuffList {
	    buffIds:list<int> ->buff.buff;
        buffs:list<BuffLogic>;
    }

    struct TimelineBuff { // 技能skill的逻辑一般是给自己add一个TimelineBuff
        durationSec:float;
        effectsOnTime:list<buff.EffectOnTime>;
    }
}


struct EffectOnTrigger {
	triggers:list<str> ->buff.triggerevt;
	effect:list<EffectLogic>;
}

struct EffectOnTime {
    time:float; //发生时间点
    condition:list<Condition>; // and
	effect:list<EffectLogic>;
	target:list<TargetSelector>;
}


struct ReplaceSkill{
	oldSkill:int ->skill;
	newSkill:int ->skill;
}


struct WeightedBuffs {
	buffs:list<int> ->buff.buff;
	weight:float;
}

interface TargetSelector {
	struct Self {
	}

	struct Caster {
	}

	struct Sender {
	}

	struct LockedTarget {
	}

	struct Cube {
		offset:Vec3;
		localYRotate:float;
		xLength:float;
		zLength:float;
		rangeZone:buff.TargetRangeZone;
	}

	struct Cylinder {
		offset:Vec3;
		localYRotate:float;
		radius:float;
		angle:float;
		rangeZone:buff.TargetRangeZone;
	}

	struct Ring {
		offset:Vec3;
		localYRotate:float;
		innerRadius:float;
		externalRadius:float;
		angle:float;
		rangeZone:buff.TargetRangeZone;
	}

	struct FullScene {
		areaRandom:bool;
	}
}

struct TargetRangeZone {
	bottomHeight:float;
	topHeight:float;
	areaRandom:bool;
}

interface HitHintZone {
    struct Rectangle {
        xLength:float;
        zLength:float;
    }

    struct Circle {
        radius:float;
    }

    struct StaticSector {
    }

    struct Sector {
        radius:float;
        angle:int;
    }

    struct Ring {
        innerRadius:float;
        outerRadius:float;
    }
}


interface Condition (defaultImpl='NoCondition'){
	struct NoCondition {
	}

	struct HpLess {
		limit:int;
	}

	struct HpGreaterThanOrEqual {
		limit:int;
	}

	struct LiveTimeGreaterThan {
		limit:int;
	}

	struct HasBuffLogic {
		bufflogictype:int;
	}

	struct HasBuff {
		buffid:int;
		buffcount:int;
	}

	struct FindBuff {
		expection:bool;
		buffid:int;
	}

	struct DamageSenderHasBuff {
		expection:bool;
		buffid:int;
	}


	struct DamageReceiverHpGreaterThanOrEqual {
		limit:int;
	}

	struct PerDamageGreaterThanOrEqual {
		limit:int;
	}

	struct LethalDamage {
	}

	struct OverDistance {
		distance:float;
	}

	struct OverDistanceToCaster {
		distance:float;
	}

	struct OtherHasBuffByDistanceLimit {
		distancelimit:float;
		buffid:int ->buff.buff;
	}


	struct DamageSenderType {
		type:int;
	}

	struct HasBuffClass {
		buffclass:int;
		buffsubclass:int;
	}

	struct MpRateRange {
		minrateinclude:int;
		maxrateexclude:int;
	}

	struct HasBuffBySameCaster {
		buffid:int ->buff.buff;
		buffcount:int;
	}

	struct MpGreaterOrEqualToCaster {
		iscomparerate:bool;
	}

	struct FindBuffBySameCaster {
		expection:bool;
		buffid:int ->buff.buff;
	}


	struct And {
		conditions:list<Condition>;
	}

	struct Or {
		conditions:list<Condition>;
	}

	struct Not {
        condition:Condition;
    }
}


interface ParamInt (defaultImpl='Value'){
    struct Value {
        value:int;
    }

    struct Var {
        var:str;
    }

    struct LinearByLevel {
        a:float; // ax+b
        b:float;
    }

    struct IndexByLevel {
        array:list<int>; //array[x]
    }

    struct Rule {
        intIfs:list<IntIf>;
        def:int; //默认
    }
}


struct IntIf {
    cond:Condition;
    pInt:ParamInt;
}


interface ParamStr (defaultImpl='Value'){
    struct Value {
        value:str;
    }

    struct Var {
        var:str;
    }

    struct Rule {
        strIfs:list<StrIf>;
        def:str; //默认
    }
}

struct StrIf {
    cond:Condition;
    pStr:ParamStr;
}


table buff[Id] (json, entry='Ename') {
	Id:int; // BUFF ID
	Ename:str; // 程序用名
	Name:text; // 名称
	BuffDesc:text; // 效果描述
	MaxCount:int; // 该效果同时存在的最大数（无限制填-1）
	IsNeedNoticeClient:bool; // 效果是否需要同步到客户端（客户端要用到 要显示 就配1 不需要就不要配1）
	BuffIcon:str ; //->asset.assets (nullable, client); // 效果图标（用于在人物头像下显示 IsNeedNoticeClient配成1才行 无则填-1）
	IsIconAwaysShow:bool; // 效果图标是否是常驻显示 一旦显示之后不能被顶替
	TarIconProi:int; // 目标头像下效果图标显示优先级（值越大优先级越高 <=0不显示）
	SelfIconProi:int; // 自己头像下效果图标显示优先级（值越大优先级越高 <=0不显示）
	BuffAnim:str; // 效果动作
	BuffSfx:str; //->model.sfx (nullable, client); // 效果特效(引用model/sfx.csv)
	FadeOutRule:int; // 效果消散规则（-1自然消散不做特殊检测 ）（1离开场景消散 2死亡消散 4移动消散 8离队消散 (符合两种及以上 累加)）
	MutexCollectionId:int; // 互斥集合ID(值相同的属于一个互斥集)
	MutexPriority:int; // 互斥优先级（从0开始 数值越大 优先级越高 同一优先级的互相顶替）
	CanBeDispel:bool; // 效果是否能被驱散（0否 1是）
	CanBeSteal:bool; // 效果能否被偷取
	BuffClass:int; // 效果分类（2减益 1增益<增益减益取决于效果添加到自己身上是有益还是有害的>）
	BuffSubClass:int; // 效果分类子类（0无指定子分类 1晕眩类 2魅惑类 4昏睡类 8定身类 16虚弱类 32伤害类效果 64属性增益类效果 128属性减益类效果 256HOT类效果 512DOT类效果 1024减速类 2048打断类 4096Reset效果 8192禁锢）符合一种以上累加
	AttachChance:int; // 增加buff到obj身上时多大概率真正增加上，10000表示100%
	Duration:int; // buff持续时间，单位是毫秒，瞬间buff持续时间为0，永久buff持续时间为-1
	Logic:buff.BuffLogic; // 效果逻辑
}

table triggerevt[name] (enum='name') {
	id:int;
	name:str;
}

interface SkillLogic {
	struct AddBuff {
		buffIds:list<int> ->buff.buff;
        paramBuffIds:list<ParamInt>;
        paramBuffs:list<BuffLogic>;
        target:list<TargetSelector>;
	}
    struct AddTimelineBuff {
        durationSec:float;
        effectsOnTime:list<buff.EffectOnTime>;
        target:list<TargetSelector>;
	}
    struct Effect {
		effect:EffectLogic; // 占位标签
	}

	struct PassiveSkill {
		attrID1:int; // 属性1ID
		value1:int; // 属性1增加值
		attrID2:int; // 属性2ID
		value2:int; // 属性2增加值
	}
}

table skill[ID] (json) {
	ID:int; // 技能ID
	Name:str; // 技能名称
	skillDes:str; // 技能描述(创建角色展示页技能描述)
	AttackType:int; // 攻击类型(1攻，2防，4辅)
	IsActiveSkill:bool; // 是否主动技(TRUE:主动技；FALSE：被动技)
	IsDisableMove:bool; // 释放时是否禁止移动(TRUE:是,FALSE:否)
    IsBreakByMove:bool; // 移动是否打断
    IsBreakByOtherSkill:bool; // 是否可以提前被自己其它技能中断
    BreakTime:int; // 被中断的时间点(单位毫秒)(技能可以提前中断时有效)
    IsBreakByAttack:bool; // 受怪普通攻击是否打断
    HitEffect:str; // 命中特效(model/sfx.csv)
    HitSound:str; // 命中声效(config/asset/assets.csv的assetpath列)
    ThreatCoefficient:float; // 仇恨系数
    autoRideDown:bool; // 使用该技能是否自动下坐骑，true：自动下坐骑
    autoFlyDown:bool; // 使用该技能是否自动下飞行，true：自动下飞行
    Radius:float; // 范围半径
    SkillCostType2SkillCostCountMap:map<int,int>; // 消耗1类型（1 血值 2 血百分比 3蓝值 4蓝百分比 5金币 6银币）
    GainsType2GainsNumMap:map<int,int>; // 收益1类型（1 血值 2 血百分比 3蓝值 4蓝百分比）（只有进入战斗状态才获得
    CombatValue:int; // 战斗力评分
    SkillLogic:SkillLogic; // 技能逻辑ID（没有不填写）
}